<#@ template language="C#" #>
<#
    static string FirstCharToUpper(string s)
    {
        if (string.IsNullOrEmpty(s))
            return string.Empty;

        return char.ToUpper(s[0]) + s.Substring(1);
    }

    string[] elements =
    {
        "a", "abbr", "address", "area", "article", "aside", "audio", "b", "base", "bdi", "bdo", "big", "blockquote",
        "body", "br", "button", "canvas", "caption", "cite", "code", "col", "colgroup", "data", "datalist", "dd",
        "del", "details", "dfn", "dialog", "div", "dl", "dt", "em", "embed", "fieldset", "figcaption", "figure",
        "footer", "form", "h1", "h2", "h3", "h4", "h5", "h6", "head", "header", "hgroup", "hr", "html", "i",
        "iframe", "img", "input", "ins", "kbd", "keygen", "label", "legend", "li", "link", "main", "map", "mark",
        "marquee", "menu", "menuitem", "meta", "meter", "nav", "noscript", "object", "ol", "optgroup", "option",
        "output", "p", "param", "picture", "pre", "progress", "q", "rp", "rt", "ruby", "s", "samp", "script",
        "section", "select", "small", "source", "span", "strong", "style", "sub", "summary", "sup", "table",
        "tbody", "td", "textarea", "tfoot", "th", "thead", "time", "title", "tr", "track", "u", "ul", "var",
        "video", "wbr",

        // SVG
        // "circle", "clipPath", "defs", "ellipse", "foreignObject", "g", "image", "line", "linearGradient", "marker",
        // "mask", "path", "pattern", "polygon", "polyline", "radialGradient", "rect", "stop", "svg", "text", "tspan",
    };

    WriteLine("//------------------------------------------------------------------------------");
    WriteLine("// <auto-generated>");
    WriteLine("//     This code was generated by a tool.");
    WriteLine("//     Changes to this file may cause incorrect behavior and will be lost if");
    WriteLine("//     the code is regenerated.");
    WriteLine("// </auto-generated>");
    WriteLine("//------------------------------------------------------------------------------");
    WriteLine("");
    WriteLine("using System;");
    WriteLine("using System.Collections.Generic;");
    WriteLine("");
    WriteLine("#nullable enable");
    WriteLine("");
    WriteLine("namespace StyledBlazor");
    WriteLine("{");
    WriteLine("    public partial record Styled");
    WriteLine("    {");

    var first = true;
    foreach (var element in elements)
    {
        var upperElement = FirstCharToUpper(element);

        if (!first)
        {
            WriteLine("");
        }
        else
        {
            first = false;
        }

        WriteLine("        public record {0} : Styled", upperElement);
        WriteLine("        {");
        WriteLine("            public {0}() : base(\"{1}\")", upperElement, element);
        WriteLine("            {");
        WriteLine("            }");
        WriteLine("");
        WriteLine("            public {0}(string cssClass) : base(\"{0}\", cssClass)", upperElement);
        WriteLine("            {");
        WriteLine("            }");
        WriteLine("        }");
    }


    WriteLine("    }");
    WriteLine("}");
#>